// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: polo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PholoClient is the client API for Pholo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PholoClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Healthz(ctx context.Context, in *HealthZ, opts ...grpc.CallOption) (*HealthZ, error)
}

type pholoClient struct {
	cc grpc.ClientConnInterface
}

func NewPholoClient(cc grpc.ClientConnInterface) PholoClient {
	return &pholoClient{cc}
}

func (c *pholoClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, "/pholo.Pholo/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pholoClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/pholo.Pholo/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pholoClient) Healthz(ctx context.Context, in *HealthZ, opts ...grpc.CallOption) (*HealthZ, error) {
	out := new(HealthZ)
	err := c.cc.Invoke(ctx, "/pholo.Pholo/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PholoServer is the server API for Pholo service.
// All implementations must embed UnimplementedPholoServer
// for forward compatibility
type PholoServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Healthz(context.Context, *HealthZ) (*HealthZ, error)
	mustEmbedUnimplementedPholoServer()
}

// UnimplementedPholoServer must be embedded to have forward compatible implementations.
type UnimplementedPholoServer struct {
}

func (UnimplementedPholoServer) Echo(context.Context, *EchoMessage) (*EchoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedPholoServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPholoServer) Healthz(context.Context, *HealthZ) (*HealthZ, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedPholoServer) mustEmbedUnimplementedPholoServer() {}

// UnsafePholoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PholoServer will
// result in compilation errors.
type UnsafePholoServer interface {
	mustEmbedUnimplementedPholoServer()
}

func RegisterPholoServer(s grpc.ServiceRegistrar, srv PholoServer) {
	s.RegisterService(&Pholo_ServiceDesc, srv)
}

func _Pholo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PholoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pholo.Pholo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PholoServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pholo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PholoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pholo.Pholo/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PholoServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pholo_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthZ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PholoServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pholo.Pholo/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PholoServer).Healthz(ctx, req.(*HealthZ))
	}
	return interceptor(ctx, in, info, handler)
}

// Pholo_ServiceDesc is the grpc.ServiceDesc for Pholo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pholo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pholo.Pholo",
	HandlerType: (*PholoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Pholo_Echo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Pholo_Ping_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Pholo_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polo.proto",
}
